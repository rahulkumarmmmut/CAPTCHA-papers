ðŸ“‘ Summary

Methodology

The authors evaluate the security of Googleâ€™s reCAPTCHAv2 against modern AI solvers by fine-tuning YOLOv8 models for classification and segmentation tasks. They also incorporate VPN usage, realistic mouse movements (Bezier curves), and browser cookies/history into their attack strategy to mimic human behavior and evade detection.

â¸»

Steps
	1.	Data Preparation
	â€¢	Collected ~14k labeled images for classification challenges (traffic-related categories).
	â€¢	Used pre-trained YOLOv8 segmentation models for grid-based challenges.
	2.	Solver Implementation
	â€¢	Identified CAPTCHA type (classification, segmentation, or dynamic grid).
	â€¢	Applied YOLOv8 classification for types 1 & 3; segmentation for type 2.
	â€¢	Selected cells/images above probability thresholds.
	3.	Evaluation Setup
	â€¢	Automated environment using Python 3.9 + Selenium + Firefox.
	â€¢	Integrated VPNs to rotate IPs and avoid detection.
	â€¢	Added Bezier curve mouse movements for human-like interactions.
	â€¢	Used real browser cookies/history to reduce difficulty level.
	4.	Experiments
	â€¢	Compared VPN vs non-VPN runs.
	â€¢	Compared with and without simulated mouse movements.
	â€¢	Compared with and without history/cookies.
	â€¢	Compared bot vs human performance under identical conditions.

â¸»

Results
	â€¢	Achieved 100% success rate, surpassing previous solvers (68â€“71%).
	â€¢	Without VPN, bots were eventually flagged; with VPN, 100% of 100 runs passed.
	â€¢	Adding realistic mouse movement reduced required challenges significantly.
	â€¢	Including cookies/history drastically improved performance and stability.
	â€¢	Bots required fewer or equal challenges compared to humans, with no statistically significant difference.
	â€¢	Conclusion: reCAPTCHAv2 is fundamentally broken under modern AI conditions, relying heavily on cookies/history for defense.
